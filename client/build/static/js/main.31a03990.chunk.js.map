{"version":3,"sources":["components/Map/GeoJSONs/GeoJSONs.js","HelperFunctions/objectChecking.js","HelperFunctions/findDistrict.js","components/Map/PortalLayers/DistrictInfo.js","components/Map/Markers/Marker/Marker.js","components/Map/Markers/Markers.js","APIs/axios.js","components/Map/Map.js","components/FormElements/Form/Form.js","components/FormElements/InitialInfo/InitialInfo.js","hoc/Aux.js","components/FormElements/FormElements.js","App.js","serviceWorker.js","index.js"],"names":["provinceArray","province1","province2","province3","province4","province5","province6","province7","GeoJSONs","props","getColor","feature","object","currentFeature","Object","keys","length","properties","DISTRICT","highLightFeature","e","updateStateInMaps","target","resetHighlight","onEachFeatureHandler","layer","on","mouseover","mouseout","click","setStyle","weight","opacity","fillColor","color","fillOpacity","dashArray","PROVINCE","map","element","index","GeoJSON","key","data","style","onEachFeature","inside","require","provinces","casesReportedMap","forEach","province","features","district","getDistrictCoords","geometry","coordinates","findDistrict","lat","long","coords","districtInfo","districtName","casesReported","className","marginTop","L","noMessageIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","messageIcon","marker","Marker","position","message","Popup","markers","entries","entry","API_URL","a","axios","get","alert","console","log","MainMap","state","devLatLong","DEVonDragEndHandler","latlng","getCenter","DEVupdatePos","lng","fillingForm","zoom","this","setState","Map","center","TileLayer","attribution","url","updateCurrentFeature","bind","Markers","DistrictInfo","getEntries","then","updateNumberOfCases","catch","Component","Form","initialState","freeze","name","phonenumber","age","useState","formData","updateFormData","onChangeHandler","preventDefault","newState","id","value","trim","onSubmit","handleSubmitClick","htmlFor","type","autoComplete","onChange","maxLength","min","placeholder","disabled","rows","InitialInfo","classes","updateClassesLah","onClick","setTimeout","Aux","children","FormElements","showForm","submitted","askBrowserForLocation","navigator","geolocation","getCurrentPosition","latitude","longitude","updateLatLong","submitForm","form","App","curr","setLatLong","request","method","window","location","reload","sendForm","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"y88qCAaMA,EAAc,CAACC,EAAWC,EAAWC,EAAWC,EAAWC,EAAWC,EAAWC,GAiDxEC,EA9CE,SAACC,GACd,SAASC,EAASC,GACd,OClBeC,EDkBEH,EAAMI,eCjBS,IAA7BC,OAAOC,KAAKH,GAAQI,ODkBZ,UACFP,EAAMI,eAAeI,WAAWC,WAAWP,EAAQM,WAAWC,SAC5D,OAKJ,UC1BO,IAACN,ED6BnB,SAASO,EAAiBC,GACtBX,EAAMY,kBAAkBD,EAAEE,OAAOX,SAGrC,SAASY,EAAeH,GACpBX,EAAMY,kBAAkB,IAG5B,SAASG,EAAqBb,EAAQc,GAClCA,EAAMC,GAAG,CACLC,UAAUR,EACVS,SAASL,EACTM,MAAMV,IAId,SAASW,EAASnB,GACd,MAAO,CACHoB,OAAO,EACPC,QAAQ,GACRC,UAAUvB,EAASC,GACnBuB,MAAM,QACNC,YAAY,GACZC,UAAUzB,EAAQM,WAAWoB,UAIrC,OAAQrC,EAAcsC,KAAI,SAACC,EAAQC,GAC3B,OAAO,kBAACC,EAAA,EAAD,CAASC,IAAKF,EAAOG,KAAMJ,EAASK,MAAOd,EAAUe,cAAerB,Q,QEjDnFsB,EAAOC,EAAQ,IAEbC,EAAU,CAAC/C,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,GAChE0C,EAAiB,GAG1BD,EAAUE,SAAQ,SAACC,GACfA,EAASC,SAASF,SAAQ,SAACG,GACvBJ,EAAiBI,EAASpC,WAAWC,UAAU,QAO3D,IAAMoC,EAAoB,SAACD,GACvB,OAAOA,EAASE,SAASC,aAGhBC,EAAe,SAACC,EAAIC,GAAU,IAAD,gBACfX,GADe,IACtC,2BAAiC,CAAC,IAAD,EAAtBG,EAAsB,sBACPA,EAASC,UADF,IAC7B,IAAI,EAAJ,qBAAwC,CAAC,IAA/BC,EAA8B,QAC9BO,EAAON,EAAkBD,GAC/B,GAAGP,EAAO,CAACY,EAAIC,GAAMC,GACjB,OAAOP,EAASpC,WAAWC,UAJN,gCADK,8BAStC,OAAO,MCtBI2C,EAXM,SAACpD,GAClB,IAAMqD,EAAiD,IAApChD,OAAOC,KAAKN,EAAME,SAASK,OAAY,oBAAoBP,EAAME,QAAQM,WAAWC,SACjG6C,EAAcd,EAAiBa,GACrC,OACI,yBAAKE,UAAU,QACX,wBAAIpB,MAAO,CAACqB,UAAU,SAAUH,GAChC,+CAAqBC,K,gBCN3BG,EAAEnB,EAAQ,GAEZoB,EAAgBD,EAAEE,KAAK,CACzBC,QAAS,qGACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAGhBC,EAAaP,EAAEE,KAAK,CACtBC,QAAS,qGACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAWLE,EARA,SAACjE,GACZ,OACI,kBAACkE,EAAA,EAAD,CAAQC,SAAUnE,EAAMmE,SAAUR,KAAM3D,EAAMoE,QAAQJ,EAAYN,GAC/D1D,EAAMoE,QAAQ,kBAACC,EAAA,EAAD,KAAQrE,EAAMoE,SAAiB,KCXzCE,EARA,SAACtE,GAKZ,OAJcA,EAAMuE,QAAQ1C,KAAI,SAAC2C,EAAMzC,GACnC,IAAMoC,EAAS,CAACK,EAAMvB,IAAIuB,EAAMtB,MAChC,OAAO,kBAAC,EAAD,CAAQjB,IAAKF,EAAOqC,QAASI,EAAMJ,QAASD,SAAUA,Q,kDCJ/DM,EAAU,wB,4CAET,sBAAAC,EAAA,+EAEcC,IAAMC,IAAIH,EAAQ,UAFhC,wEAICI,MAAM,0CACNC,QAAQC,IAAR,MALD,0D,0BCUcC,E,4MACjBC,MAAM,CACF/E,QAAQ,GACRqE,QAAQ,I,EAGZW,WAAW,CACPjC,IAAI,EAAKjD,MAAMiD,IACfC,KAAK,EAAKlD,MAAMkD,M,EAGpBiC,oBAAoB,SAACxE,GACjB,IAAIyE,EAAOzE,EAAEE,OAAOwE,YACpBP,QAAQC,IAAI,EAAK/E,OACjB,EAAKA,MAAMsF,aAAa,CAACrC,IAAImC,EAAOnC,IAAIC,KAAKkC,EAAOG,IAAIC,aAAY,EAAKC,KAAK,M,mEAG7DvF,GACjBwF,KAAKC,SAAS,CAACzF,c,+BAIf,IAAMiE,EAAS,CAACuB,KAAK1F,MAAMiD,IAAKyC,KAAK1F,MAAMkD,MAC3C,OACI,kBAAC0C,EAAA,EAAD,CAAKC,OAAQ1B,EAAUsB,KAAMC,KAAK1F,MAAMyF,KAAMlC,UAAU,OACpD,kBAACuC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAAC,EAAD,CAAU5F,eAAgBsF,KAAKT,MAAM/E,QAASU,kBAAmB8E,KAAKO,qBAAqBC,KAAKR,QAC/FA,KAAK1F,MAAMwF,YAAc,kBAAC,EAAD,CAAQrB,SAAUA,IAAY,GACxD,kBAACgC,EAAD,CAAS5B,QAASmB,KAAKT,MAAMV,UAC7B,kBAAC,IAAD,CAAQJ,SAAS,cACb,kBAACiC,EAAD,CAAclG,QAASwF,KAAKT,MAAM/E,c,0CAM9B,IAAD,QDjDhB,WAAP,gCCmDQmG,GAAaC,MAAK,SAAC/B,GACXA,IAEgB,KADpBA,EAAQA,EAAQrC,MACL3B,OACPsE,MAAM,+BLpBa,SAACN,GAChCA,EAAQ9B,SAAQ,SAAC+B,GACbhC,EAAiBgC,EAAM/D,UAAU+B,EAAiBgC,EAAM/D,UAAU,KKoB1D8F,CAAoBhC,GAExB,EAAKoB,SAAS,CAACpB,gBAChBiC,OAAM,SAAC7F,GAAD,OAAKmE,QAAQC,IAAIpE,U,GAlDG8F,a,QCkDtBC,G,MA5DF,SAAC1G,GACV,IAAM2G,EAAatG,OAAOuG,OAAO,CAC7BC,KAAK,GACLC,YAAY,GACZC,IAAI,KACJtG,SAAST,EAAMS,SACf2D,QAAQ,KANQ,EASe4C,mBAASL,GATxB,mBASbM,EATa,KASHC,EATG,KAWdC,EAAiB,SAACxG,GACpBA,EAAEyG,iBACF,IAAIC,EAAS,2BACNJ,GADK,kBAGPtG,EAAEE,OAAOyG,GAAI3G,EAAEE,OAAO0G,MAAMC,SAGjCN,EAAeG,IAYnB,OACI,0BAAM9D,UAAU,YAAYkE,SAVF,SAAC9G,GAC3BA,EAAEyG,iBACiB,KAAhBH,EAASJ,MAAoC,KAAvBI,EAASH,aAAmC,OAAfG,EAASF,IAI/D/G,EAAM0H,kBAAkBT,GAHpBpC,MAAM,qCAQN,8DACA,iDACA,yBAAKtB,UAAU,eACX,2BAAOoE,QAAQ,QAAf,OAA0B,kCAA1B,MACA,2BAAOL,GAAG,OAAOM,KAAK,OAAOC,aAAa,MAAMC,SAAUX,KAE9D,yBAAK5D,UAAU,eACX,2BAAOoE,QAAQ,eAAf,eAAyC,kCAAzC,MACA,2BAAOL,GAAG,cAAcM,KAAK,OAAOG,UAAW,GAAID,SAAUX,KAEjE,yBAAK5D,UAAU,eACX,2BAAOoE,QAAQ,OAAf,MAAwB,kCAAxB,MACA,2BAAOL,GAAG,MAAMM,KAAK,SAASI,IAAI,IAAIF,SAAUX,EAAiBc,YAAY,OAEjF,yBAAK1E,UAAU,eACX,2BAAOoE,QAAQ,YAAf,cACA,2BAAOL,GAAG,WAAWM,KAAK,OAAOL,MAAON,EAASxG,SAAUqH,SAAUX,EAAiBe,UAAQ,KAElG,yBAAK3E,UAAU,eACX,2BAAOoE,QAAQ,WAAf,aACA,8BAAUL,GAAG,UAAUS,UAAU,MAAMI,KAAK,IAAIF,YAAY,qCAAqCH,SAAUX,KAE/G,4BAAQ5D,UAAU,SAASqE,KAAK,UAAhC,aCnCGQ,G,MApBK,SAACpI,GAAW,IAAD,EACMgH,mBAAS,eADf,mBACpBqB,EADoB,KACZC,EADY,KAU3B,OACI,yBAAK/E,UAAW8E,GACZ,qEACA,sJACA,mSACA,4BAAQE,QAZC,WACbD,EAAiB,qBACjBE,YAAW,WACPF,EAAiB,qCACnB,OAQE,YCjBGG,G,MAFH,SAACzI,GAAD,OAAWA,EAAM0I,WCWRC,E,4MACjB1D,MAAM,CACF2D,UAAS,EACTC,WAAU,G,EAGdpI,SAAS,G,EAETqI,sBAAsB,WACfC,UAAUC,YACTD,UAAUC,YAAYC,oBAAmB,SAAC9E,GACtC,IAAMlB,EAAIkB,EAAShB,OAAO+F,SACpBhG,EAAKiB,EAAShB,OAAOgG,UACvBvG,EAASI,EAAaC,EAAIC,GAC1BN,GAIJ,EAAKnC,SAASmC,EACd,EAAK5C,MAAMoJ,cAAc,CACrBnG,MACAC,OACAuC,KAAK,GACLD,aAAY,EACZ/E,SAASmC,IAEb,EAAKgG,UAAS,IAXV/D,MAAM,sBAYX,WACCA,MAAM,gDAGVA,MAAM,iC,uDAKL+D,GACLlD,KAAKC,SAAS,CAACiD,e,wCAGD3B,GACdvB,KAAK1F,MAAMqJ,WAAWpC,K,+BAGtB,IAAMqC,EAAK5D,KAAKT,MAAM2D,SAAU,kBAAC,EAAD,CAAMlB,kBAAmBhC,KAAKgC,kBAAkBxB,KAAKR,MAAOjF,SAAUiF,KAAKjF,WAAc,4BAAQ8C,UAAU,iBAAiBgF,QAAS7C,KAAKoD,sBAAsB5C,KAAKR,OAA5E,oBACzH,OACI,kBAAC,EAAD,KACK4D,EACD,kBAAC,EAAD,W,GAhD0B7C,a,YCiC3B8C,OAnCf,WAAgB,IAAD,EACYvC,mBAAS,CAChC/D,IAAI,GACJC,KAAK,GACLuC,KAAK,EACLD,aAAY,IALD,mBACNgE,EADM,KACDC,EADC,KAwBb,OACE,yBAAKlG,UAAU,OACb,qHACA,yBAAK+D,GAAG,WACN,kBAAC,EAAD,CAAKrE,IAAKuG,EAAKvG,IAAKC,KAAMsG,EAAKtG,KAAMuC,KAAM+D,EAAK/D,KAAMD,YAAagE,EAAKhE,YAAaF,aAAcmE,IACnG,kBAAC,EAAD,CAAcL,cAAeK,EAAYJ,WArBvB,SAACpC,GACvB,IAAM7B,EAAO,eACRoE,UAEEpE,EAAOK,YACPL,EAAOI,YAEdyB,EAAS,2BACJA,GACA7B,GAELN,QAAQC,IAAIkC,GNfT,SAAkBA,GACrBtC,IAAM+E,QAAQ,CACNC,OAAQ,OACR3D,IAAKvB,EAAQ,SACbvC,KAAM+E,IACLX,MAAK,WACJzB,MAAM,SACN+E,OAAOC,SAASC,QAAO,MAE1BtD,OAAM,SAAC7F,GACJkE,MAAM,gEMOhBkF,CAAS9C,SClBO+C,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MACrBnE,MAAK,SAAAoE,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACL9F,QAAQ8F,MAAMA,EAAMxG,c","file":"static/js/main.31a03990.chunk.js","sourcesContent":["import React from 'react'\nimport { GeoJSON } from 'react-leaflet'\n\nimport province1 from '../../../assets/province1.json'\nimport province2 from '../../../assets/province2.json'\nimport province3 from '../../../assets/province3.json'\nimport province4 from '../../../assets/province4.json'\nimport province5 from '../../../assets/province5.json'\nimport province6 from '../../../assets/province6.json'\nimport province7 from '../../../assets/province7.json'\n\nimport {isEmptyObject} from '../../../HelperFunctions/objectChecking'\n\nconst provinceArray=[province1, province2, province3, province4, province5, province6, province7];\n\n\nconst GeoJSONs = (props) => {\n    function getColor(feature){\n        if(isEmptyObject(props.currentFeature)){\n            return '#3322ff'\n        }else if(props.currentFeature.properties.DISTRICT===feature.properties.DISTRICT){\n            return '#ccc'\n        }\n        //if(!isEmptyObject(feature) && props.currentFeature.properties.DISTRICT===feature.properties.DISTRICT){\n        //    return '#ccc'\n        //}\n        return '#3322ff'\n    }\n  \n    function highLightFeature(e){\n        props.updateStateInMaps(e.target.feature);\n    }\n    \n    function resetHighlight(e) {\n        props.updateStateInMaps({})\n    }\n      \n    function onEachFeatureHandler(feature,layer){\n        layer.on({\n            mouseover:highLightFeature,\n            mouseout:resetHighlight,\n            click:highLightFeature\n        })\n    }\n\n    function setStyle(feature){\n        return {\n            weight:3,\n            opacity:0.7,\n            fillColor:getColor(feature),\n            color:'black',\n            fillOpacity:0.7,\n            dashArray:feature.properties.PROVINCE\n        };\n    }\n    \n    return (provinceArray.map((element,index)=>{\n            return <GeoJSON key={index} data={element} style={setStyle} onEachFeature={onEachFeatureHandler}/>\n        })\n    );\n}\n\nexport default GeoJSONs","const isEmptyObject = (object) => {\n    return Object.keys(object).length===0;\n} \n\nexport {\n    isEmptyObject\n}","import province1 from '../assets/province1.json'\nimport province2 from '../assets/province2.json'\nimport province3 from '../assets/province3.json'\nimport province4 from '../assets/province4.json'\nimport province5 from '../assets/province5.json'\nimport province6 from '../assets/province6.json'\nimport province7 from '../assets/province7.json'\n\nvar inside=require('point-in-polygon');\n\nconst provinces=[province1,province2,province3,province4,province5,province6,province7]\nexport const casesReportedMap={}\n\nconst initializeCasesReported = () =>{\n    provinces.forEach((province)=>{\n        province.features.forEach((district)=>{\n            casesReportedMap[district.properties.DISTRICT]=0;\n        });\n    });\n}\n\ninitializeCasesReported()\n\nconst getDistrictCoords = (district) =>{\n    return district.geometry.coordinates\n}\n\nexport const findDistrict = (lat,long) => {\n    for (const province of provinces){\n        for(const district of province.features){\n            const coords=getDistrictCoords(district);\n            if(inside([lat,long],coords)){\n                return district.properties.DISTRICT\n            }\n        }\n    }\n    return null;\n}\n\nexport const updateNumberOfCases = (entries) => {\n    entries.forEach((entry)=>{\n        casesReportedMap[entry.DISTRICT]=casesReportedMap[entry.DISTRICT]+1;\n    })\n}","import React from 'react'\nimport {casesReportedMap} from '../../../HelperFunctions/findDistrict'\n\nconst districtInfo = (props) => {\n    const districtName=Object.keys(props.feature).length===0? 'Select a district':props.feature.properties.DISTRICT\n    const casesReported=casesReportedMap[districtName]\n    return (\n        <div className=\"info\">\n            <h2 style={{marginTop:'10px'}}>{districtName}</h2>\n            <h4>Cases Reported: {casesReported}</h4>\n        </div>\n    )\n}\n\nexport default districtInfo","import React from 'react'\nimport { Marker, Popup } from 'react-leaflet'\n\nconst L=require('leaflet')\n\nvar noMessageIcon = L.icon({\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12.5, 41],\n  popupAnchor: [0, -41],\n});\n\nvar messageIcon= L.icon({\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-gold.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12.5, 41],\n  popupAnchor: [0, -41],\n});\n\nconst marker = (props) => {\n    return  (\n        <Marker position={props.position} icon={props.message?messageIcon:noMessageIcon}>\n          {props.message?<Popup>{props.message}</Popup>:''}\n        </Marker>\n    )\n}\n\nexport default marker","import React from 'react'\nimport Marker from './Marker/Marker'\n\nconst markers =(props)=>{\n    const entries=props.entries.map((entry,index)=>{\n        const position=[entry.lat,entry.long];\n        return <Marker key={index} message={entry.message} position={position}/>\n    })\n    return entries;\n}\n\nexport default markers;","import axios from \"axios\"\n\nconst API_URL = 'http://localhost:3001'\n\nexport async function getEntries(){\n    try{\n        return await axios.get(API_URL+'/entry') \n    }catch(e){\n        alert(\"Failed to retrieve data from database.\");\n        console.log(e);\n    }\n}\n\nexport function sendForm(formData){\n    axios.request({\n            method: 'post',\n            url: API_URL+'/entry',\n            data: formData\n          }).then(()=>{\n              alert('Saved')\n              window.location.reload(false)\n          })\n          .catch((e)=>{\n              alert('Error please check phone number or connection to database');\n          })\n}","import React, { Component } from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport Portal from 'react-leaflet-portal'\n\nimport GeoJSONs from './GeoJSONs/GeoJSONs'\nimport DistrictInfo from './PortalLayers/DistrictInfo'\nimport Marker from './Markers/Marker/Marker'\nimport Markers from './Markers/Markers'\n\nimport './Map.css'\n\nimport {getEntries} from '../../APIs/axios'\nimport { updateNumberOfCases } from '../../HelperFunctions/findDistrict'\n\nexport default class MainMap extends Component{\n    state={\n        feature:{},\n        entries:[]\n    }\n\n    devLatLong={    \n        lat:this.props.lat,\n        long:this.props.long\n    }\n\n    DEVonDragEndHandler=(e)=>{\n        var latlng=e.target.getCenter()\n        console.log(this.props)\n        this.props.DEVupdatePos({lat:latlng.lat,long:latlng.lng,fillingForm:true,zoom:10})\n    }\n\n    updateCurrentFeature(feature){\n        this.setState({feature})\n    }\n\n    render(){\n        const position=[this.props.lat, this.props.long];\n        return (\n            <Map center={position} zoom={this.props.zoom} className=\"Map\">\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                <GeoJSONs currentFeature={this.state.feature} updateStateInMaps={this.updateCurrentFeature.bind(this)}/>\n                {this.props.fillingForm ? <Marker position={position}/>:''}\n                <Markers entries={this.state.entries} />\n                <Portal position=\"bottomleft\">\n                    <DistrictInfo feature={this.state.feature}/>\n                </Portal>\n            </Map>\n        );\n    }\n\n    componentDidMount(){\n        //get request to get all the Marker locations... update the legend somehow?\n        getEntries().then((entries)=>{\n            if(!entries) return;\n            entries=entries.data\n            if(entries.length===0){\n                alert('no cases have been reported');\n            }else{\n                updateNumberOfCases(entries);\n            }\n            this.setState({entries})\n        }).catch((e)=>console.log(e));\n    }\n}","import React, { useState } from 'react'\n\nimport \"./Form3.css\"\n\nconst Form = (props) => {\n    const initialState=Object.freeze({\n        name:'',\n        phonenumber:'',\n        age:null,\n        DISTRICT:props.DISTRICT,\n        message:''\n    });\n\n    const [formData, updateFormData] = useState(initialState);\n\n    const onChangeHandler= (e) => {\n        e.preventDefault()\n        var newState={\n            ...formData,\n\n            [e.target.id]:e.target.value.trim()\n        }\n\n        updateFormData(newState);\n    }\n\n    const validateAndHandleSubmit=(e)=>{\n        e.preventDefault()\n        if(formData.name==='' || formData.phonenumber==='' || formData.age===null){\n            alert('Please fill the required fields');\n            return;\n        }\n        props.handleSubmitClick(formData)\n    }\n\n    return (\n        <form className=\"container\" onSubmit={validateAndHandleSubmit}>\n            <h2>Please keep social distancing.</h2>\n            <small>* are required</small>\n            <div className=\"formControl\">\n                <label htmlFor=\"name\">Name<sup>*</sup>: </label>\n                <input id=\"name\" type=\"text\" autoComplete=\"off\" onChange={onChangeHandler}/>    \n            </div>\n            <div className=\"formControl\">\n                <label htmlFor=\"phonenumber\">Phone Number<sup>*</sup>: </label>\n                <input id=\"phonenumber\" type=\"text\" maxLength={10} onChange={onChangeHandler}/>\n            </div>\n            <div className=\"formControl\">\n                <label htmlFor=\"age\">Age<sup>*</sup>: </label>\n                <input id=\"age\" type=\"number\" min=\"1\" onChange={onChangeHandler} placeholder=\"1\"/>\n            </div>\n            <div className=\"formControl\">\n                <label htmlFor=\"District\">District: </label>\n                <input id=\"DISTRICT\" type=\"text\" value={formData.DISTRICT} onChange={onChangeHandler} disabled/>\n            </div>       \n            <div className=\"formControl\">\n                <label htmlFor=\"Message\">Message: </label>\n                <textarea id=\"message\" maxLength=\"150\" rows=\"3\" placeholder=\"Leave a message for people to see!\" onChange={onChangeHandler}></textarea>\n            </div>\n            <button className=\"button\" type=\"submit\">Submit</button>\n        </form>        \n    )\n}\n\nexport default Form","import React,{useState} from 'react'\n\nimport './InitialInfo.css'\n\nconst InitialInfo = (props) => {\n    const [classes,updateClassesLah]=useState('initialInfo');\n\n    const closeInfo =()=>{\n        updateClassesLah('initialInfo close')\n        setTimeout(()=>{\n            updateClassesLah('initialInfo close closeComplete');\n        },1000);\n    }\n\n    return (\n        <div className={classes}>\n            <h2>नमस्ते!</h2>\n            <p>This page is intended for COVID patients to report their locations so we have better knowledge of COVID all over Nepal.</p>\n            <h2>कृपया हजुरलाइ COVID निदान गरिएको छ भने फारम भर्नुहोला।</h2>\n            <button onClick={closeInfo}>Close</button>\n        </div>\n    )\n}\n\nexport default InitialInfo","const Aux = (props) => props.children\n\nexport default Aux;","import React, { Component } from 'react';\n\nimport Form from './Form/Form'\nimport InitialForm from './InitialInfo/InitialInfo'\n\nimport './FormElements.css'\n\nimport { findDistrict } from '../../HelperFunctions/findDistrict'\n\nimport Aux from '../../hoc/Aux'\n\nexport default class FormElements extends Component{\n    state={\n        showForm:false,\n        submitted:false\n    }\n\n    DISTRICT=\"\";\n\n    askBrowserForLocation=()=>{\n        if(navigator.geolocation){\n            navigator.geolocation.getCurrentPosition((position)=>{\n                const lat=position.coords.latitude\n                const long=position.coords.longitude\n                var district=findDistrict(lat,long)\n                if(!district){\n                    alert('not in nepal...')\n                    return;\n                }\n                this.DISTRICT=district;\n                this.props.updateLatLong({\n                    lat,\n                    long,\n                    zoom:14,\n                    fillingForm:true,\n                    DISTRICT:district\n                })\n                this.showForm(true);\n            }, ()=>{\n                alert('Please enable geolocation on your device.');\n            })\n        }else{\n            alert('Geolocation is not supported');\n        }\n        \n    }\n\n    showForm(showForm){\n        this.setState({showForm});\n    }\n\n    handleSubmitClick(formData){\n        this.props.submitForm(formData)\n    }\n    render(){\n        const form=this.state.showForm? <Form handleSubmitClick={this.handleSubmitClick.bind(this)} DISTRICT={this.DISTRICT}/> : <button className=\"openFormButton\" onClick={this.askBrowserForLocation.bind(this)}>Report your Case</button>\n        return (\n            <Aux>\n                {form}\n                <InitialForm/>\n            </Aux>\n        );\n    }\n}","import React, { useState } from 'react';\n\nimport Map from './components/Map/Map';\nimport FormElements from './components/FormElements/FormElements';\n\nimport { sendForm } from './APIs/axios.js'\nimport 'leaflet/dist/leaflet.css'\nimport './App.css';\n\nfunction App() {\n  const [curr,setLatLong]= useState({\n    lat:27,\n    long:85,\n    zoom:5,\n    fillingForm:false\n  })\n\n  const submitFormRequest=(formData)=>{\n    const latlng={\n      ...curr\n    }\n    delete latlng.zoom\n    delete latlng.fillingForm\n\n    formData={\n      ...formData,\n      ...latlng\n    }\n    console.log(formData);\n\n    sendForm(formData);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>नेपाल COVID लोकेतोर।</h1>\n      <div id=\"wrapper\">\n        <Map lat={curr.lat} long={curr.long} zoom={curr.zoom} fillingForm={curr.fillingForm} DEVupdatePos={setLatLong}/>\n        <FormElements updateLatLong={setLatLong} submitForm={submitFormRequest}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}